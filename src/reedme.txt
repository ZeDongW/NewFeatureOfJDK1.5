JDK1.5新特性之------静态导入

静态导入的作用： 简化书写

静态导入可以作用一个类的所有静态成员

静态导入格式：
    import static 包名.类名.静态的成员

静态导入注意的事项
1.如果静态导入的成员与本类的成员存在同名的情况下，那么默认使用本类的成员，如果需要指定使用静态导入的成员，那么需要在静态成员上添加类名~

JDK1.5新特性之------增强for循环

增强for循环的作用： 简化迭代器的书写（注意：增强for循环的底层还是使用了迭代器。）

增强for循环的适用范围： 如果是实现了Iterable接口的对象或者是数组对象都可以使用增强for循环

增强for循环的格式：
    for(数据类型 变量名 : 遍历的目标ZE){

    }

增强for循环要注意的事项：
    1.增强for循环底层也是使用的迭代器获取的，只不过迭代器油JVM完成的，不需要我们获取迭代器而已，所以在使用增强for循环遍历元素的时候不能使用集合对象
      对集合的元素个数进行修改。
    2.迭代器遍历元素与增强for循环变量元素的区别：使用迭代器遍历元素的过程中可以使用迭代器对象删除集合元素，使用增强for循环遍历集合元素时，不能待用
        迭代器的remove方法删除集合元素。
    3.普通for循环与增强for循环的区别：普通for循环可以没有遍历的目标，而增强for循环一定要有遍历的目标。

JDK1.5新特性之------可变参数

可变参数格式：
    数据类型... 变量名

可变参数要注意的细节：
    1.如果一个函数用上了可变参数后，那么调用该方法的时候可以传参数也可以不传参数
    2.可变参数实际上是一个数组
    3.可变参数必须位于形参的最后一个
    4.一个函数最多有一个可变参数，因为可变参数必须位于形参中的最后一个位置上

JDK1.5新特性之------自动装箱与自动拆箱

    java是面向对象的语言，任何事物都可以通过类来描述，sun就是使用了一些类来描述java中的八种数据类型
    基本数据类型              包装数据类型
    byte                      Byte
    short                     Short
    int                       Integer
    long                      Long

    float                     Float
    double                    Double

    boolean                   Boolean

    char                      Character


    基本数据类型有了对应的包转类型的好处：
        1.可以把字符串转换成数字
        2.把数字转换成字符串
        3.把整数转换成对应的进制

    自动装箱：自动把java的基本数据类型转换成对象类型数据
    自动拆箱：把引用类型的数据转换成基本类型的数据

JDK1.5新特性之------枚举

    问题：某些方法所接收的数据必须是在固定的范围之内的。
    解决方案：这时候我们的解决方案就是自定义一个类，然后是私有化构造函数，在自定义类中创建奔雷对象

    JDK1.5对以上问题提供了新的解决方案;就是使用枚举类

    枚举： 一些方法在运行时，它需要的数据类型不是任意的，而是必须在一定范围内的值，java5之后可以直接使用枚举予以解决

    枚举类的定义格式
        enum 类名｛
            //枚举值
        ｝

    枚举要注意的细节：
        1.枚举类也是一个特殊的类
        2.枚举值默认的修饰符是public static final。
        3.枚举值的数据类型是枚举值所属类的数据类型，枚举值是指向了本类对象的
        4.枚举类的构造方法默认的修饰符是private的...
        5.枚举类可以定义自己的成员变量与成员函数
        6.枚举类可以自定义构造函数，但是构造函数的修饰符必须是private。
        7.枚举值必须在枚举类的第一个语句

    tip：
        switch适用的数据类型： byte\ char\ short \ int \String \ 枚举类型

        注意：
            case语句后面跟的枚举值，只需要单写枚举值即可，不需要再声明该枚举值是哪个类的。
